#!/usr/bin/env python3
"""Test UML Class Diagram Schema System

This test demonstrates UML's object-oriented attribute-based modeling approach 
for political analysis:

1. Class-based modeling: Entities as classes with encapsulated attributes
2. Inheritance hierarchies: Specialization through subclassing
3. Associations: Relationships between classes with cardinalities
4. Encapsulation: Attributes and methods grouped within classes
5. Implementation bias: Object-oriented design patterns

UML provides familiar object-oriented modeling but suffers from attribute-based
thinking that can lead to arbitrary design decisions and implementation bias.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.core.uml_class_schemas import (
    create_political_uml_diagram, create_carter_uml_instance,
    UMLClass, UMLAttribute, UMLMethod, UMLAssociation, UMLCardinality,
    UMLDataType, UMLVisibility
)

def test_uml_class_diagram_creation():
    """Test UML class diagram creation and structure"""
    
    print("UML CLASS DIAGRAM CREATION TEST")
    print("=" * 50)
    
    diagram = create_political_uml_diagram()
    
    # Get diagram statistics
    stats = diagram.get_statistics()
    
    print(f"Diagram: {diagram.name}")
    print(f"\nClasses:")
    print(f"  Abstract Classes: {stats['abstract_classes']}")
    print(f"  Concrete Classes: {stats['concrete_classes']}")
    print(f"  Total Classes: {stats['total_classes']}")
    
    print(f"\nClass Content:")
    print(f"  Total Attributes: {stats['total_attributes']}")
    print(f"  Total Methods: {stats['total_methods']}")
    
    print(f"\nRelationships:")
    print(f"  Associations: {stats['associations']}")
    print(f"  Inheritance: {stats['inheritance_relationships']}")
    
    # Validate diagram
    errors = diagram.validate_diagram()
    print(f"\nDiagram Validation: {'‚úÖ VALID' if not errors else '‚ùå ERRORS'}")
    if errors:
        for error in errors:
            print(f"  - {error}")
    
    return len(errors) == 0

def test_uml_object_oriented_modeling():
    """Test UML's object-oriented modeling approach"""
    
    print(f"\n{'='*60}")
    print("UML OBJECT-ORIENTED MODELING TEST")
    print("="*60)
    
    diagram = create_political_uml_diagram()
    
    print("Object-Oriented Features Analysis:")
    print("-" * 30)
    
    # Analyze inheritance hierarchies
    abstract_classes = [name for name, cls in diagram.classes.items() if cls.is_abstract]
    concrete_classes = [name for name, cls in diagram.classes.items() if not cls.is_abstract]
    
    print(f"\nInheritance Hierarchies:")
    print(f"  Abstract Base Classes ({len(abstract_classes)}):")
    for cls_name in abstract_classes:
        print(f"    - {cls_name}")
    
    print(f"\n  Concrete Subclasses ({len(concrete_classes)}):")
    for cls_name in concrete_classes:
        # Find parent classes
        parents = []
        for gen in diagram.generalizations:
            if gen.child_class == cls_name:
                parents.append(gen.parent_class)
        if parents:
            print(f"    - {cls_name} extends {', '.join(parents)}")
        else:
            print(f"    - {cls_name} (no inheritance)")
    
    # Analyze encapsulation
    print(f"\nEncapsulation Analysis:")
    sample_classes = ['Country', 'PoliticalLeader', 'Negotiation']
    for cls_name in sample_classes:
        if cls_name in diagram.classes:
            cls = diagram.classes[cls_name]
            print(f"\n  {cls_name}:")
            print(f"    Attributes ({len(cls.attributes)}):")
            for attr in cls.attributes[:3]:  # Show first 3
                print(f"      {attr}")
            print(f"    Methods ({len(cls.methods)}):")
            for method in cls.methods[:2]:  # Show first 2
                print(f"      {method}")
    
    print(f"\nüìä OBJECT-ORIENTED vs ALTERNATIVE APPROACHES:")
    
    print(f"\nUML Object-Oriented Approach:")
    print(f"  ‚úì Familiar to OOP developers")
    print(f"  ‚úì Encapsulation of related data and behavior")
    print(f"  ‚úì Inheritance for code reuse")
    print(f"  ‚úì Associations model relationships")
    print(f"  ‚úó Attribute-based thinking")
    print(f"  ‚úó Implementation bias (OOP concepts)")
    print(f"  ‚úó Arbitrary attribute grouping decisions")
    print(f"  ‚úó Limited semantic precision")
    
    print(f"\n‚úÖ UML ADVANTAGES:")
    print(f"  ‚úì Industry standard with extensive tool support")
    print(f"  ‚úì Direct mapping to object-oriented programming")
    print(f"  ‚úì Visual modeling capabilities")
    print(f"  ‚úì Well-understood by software developers")
    
    print(f"\n‚ùå UML LIMITATIONS:")
    print(f"  ‚úó Attribute-based rather than fact-based")
    print(f"  ‚úó Implementation-focused rather than conceptual")
    print(f"  ‚úó Limited constraint expressiveness")
    print(f"  ‚úó Difficult for business users to validate")
    
    return True

def test_uml_associations_and_cardinalities():
    """Test UML association modeling capabilities"""
    
    print(f"\n{'='*60}")
    print("UML ASSOCIATIONS AND CARDINALITIES TEST")
    print("="*60)
    
    diagram = create_political_uml_diagram()
    
    print("Association Analysis:")
    print("-" * 30)
    
    # Analyze different association types
    composition_assocs = [a for a in diagram.associations if a.is_composition]
    aggregation_assocs = [a for a in diagram.associations if a.is_aggregation]
    regular_assocs = [a for a in diagram.associations if not a.is_composition and not a.is_aggregation]
    
    print(f"\nComposition Relationships ({len(composition_assocs)}):")
    for assoc in composition_assocs:
        print(f"  - {assoc}")
        print(f"    (Strong ownership: {assoc.to_class} cannot exist without {assoc.from_class})")
    
    print(f"\nAggregation Relationships ({len(aggregation_assocs)}):")
    for assoc in aggregation_assocs:
        print(f"  - {assoc}")
        print(f"    (Weak ownership: {assoc.to_class} can exist independently)")
    
    print(f"\nRegular Associations ({len(regular_assocs)}):")
    for assoc in regular_assocs:
        print(f"  - {assoc}")
        print(f"    Cardinalities: {assoc.from_cardinality.value} to {assoc.to_cardinality.value}")
    
    print(f"\nüîó ASSOCIATION MODELING COMPARISON:")
    
    print(f"\nUML Association Approach:")
    print(f"  ‚úì Clear cardinality specifications")
    print(f"  ‚úì Composition vs aggregation distinction")
    print(f"  ‚úì Role names for clarity")
    print(f"  ‚úì Bidirectional relationship modeling")
    print(f"  ‚úó Limited to binary relationships")
    print(f"  ‚úó Complex patterns needed for n-ary relationships")
    print(f"  ‚úó No semantic constraints beyond cardinality")
    
    print(f"\nüìä CARDINALITY EXPRESSIVENESS:")
    cardinalities = [c.value for c in UMLCardinality]
    print(f"  Available cardinalities: {', '.join(cardinalities)}")
    print(f"  ‚úì Covers most common relationship patterns")
    print(f"  ‚úó Limited compared to ORM constraint richness")
    
    return True

def test_uml_carter_analysis():
    """Test UML schema with Carter speech analysis"""
    
    print(f"\n{'='*60}")
    print("UML CARTER SPEECH ANALYSIS")
    print("="*60)
    
    diagram = create_political_uml_diagram()
    instances = create_carter_uml_instance()
    
    print("Carter Analysis Object Instances:")
    print("-" * 30)
    
    # Analyze object instances by class
    instances_by_class = {}
    for obj_id, obj_data in instances.items():
        class_name = obj_data['class']
        if class_name not in instances_by_class:
            instances_by_class[class_name] = []
        instances_by_class[class_name].append((obj_id, obj_data))
    
    for class_name, class_instances in instances_by_class.items():
        print(f"\n{class_name.upper()} ({len(class_instances)} instances):")
        for obj_id, obj_data in class_instances:
            attrs = obj_data['attributes']
            name = attrs.get('name', obj_id)
            print(f"  - {name} ({obj_id})")
            
            # Show key attributes
            key_attrs = ['countryCode', 'politicalParty', 'conceptName', 'policyName']
            for key_attr in key_attrs:
                if key_attr in attrs:
                    print(f"    {key_attr}: {attrs[key_attr]}")
    
    print(f"\nüéØ UML OBJECT INSTANCE MODELING:")
    
    print(f"\nObject Creation Example (Jimmy Carter):")
    carter = instances['jimmy_carter']
    print(f"  Class: {carter['class']}")
    print(f"  Attributes:")
    for attr, value in carter['attributes'].items():
        print(f"    {attr}: {value}")
    
    print(f"\nüìä CARTER ANALYSIS SUMMARY:")
    total_instances = len(instances)
    total_classes_used = len(instances_by_class)
    print(f"  Total Object Instances: {total_instances}")
    print(f"  Classes Instantiated: {total_classes_used}")
    print(f"  Attribute-Based Properties: All political information stored as object attributes")
    
    print(f"\n‚úÖ UML POLITICAL ANALYSIS CAPABILITIES:")
    print(f"  ‚úì Clear object identity (Jimmy Carter as PoliticalLeader instance)")
    print(f"  ‚úì Attribute encapsulation (name, birthDate, politicalParty in same object)")
    print(f"  ‚úì Type safety through class membership")
    print(f"  ‚úì Inheritance benefits (PoliticalLeader inherits from PoliticalActor)")
    
    print(f"\n‚ùå UML MODELING LIMITATIONS:")
    print(f"  ‚úó Attribute grouping decisions (why is militarySpending in Country vs separate?)")
    print(f"  ‚úó Complex relationship modeling (d√©tente negotiation needs multiple objects)")
    print(f"  ‚úó No natural language verbalization")
    print(f"  ‚úó Implementation-biased design")
    
    return True

def test_uml_code_generation():
    """Test UML diagram code generation capabilities"""
    
    print(f"\n{'='*60}")
    print("UML CODE GENERATION TEST")
    print("="*60)
    
    diagram = create_political_uml_diagram()
    
    # Generate PlantUML code
    plantuml_code = diagram.generate_plantuml_code()
    
    print("PlantUML Code Generation:")
    print("-" * 30)
    print(plantuml_code[:800] + "..." if len(plantuml_code) > 800 else plantuml_code)
    
    # Generate textual representation
    text_diagram = diagram.generate_class_diagram_text()
    
    print(f"\nTextual Diagram Representation:")
    print("-" * 30)
    print(text_diagram[:600] + "..." if len(text_diagram) > 600 else text_diagram)
    
    print(f"\nüîß CODE GENERATION CAPABILITIES:")
    print(f"  ‚úì PlantUML code for visual rendering")
    print(f"  ‚úì Textual representation for documentation")
    print(f"  ‚úì Automated diagram generation from model")
    print(f"  ‚úì Tool integration possibilities")
    
    return True

def test_uml_vs_alternatives_comparison():
    """Compare UML with alternative modeling approaches"""
    
    print(f"\n{'='*60}")
    print("UML vs ALTERNATIVE APPROACHES COMPARISON")
    print("="*60)
    
    print("üîÑ DETAILED MODELING APPROACH COMPARISON:")
    print("-" * 40)
    
    print("\n1. ENTITY-RELATIONSHIP (ER) MODEL:")
    print("   ‚úì Simple, widely understood")
    print("   ‚úì Direct database mapping")
    print("   ‚ö†Ô∏è Limited object-oriented features")
    print("   ‚ùå Attribute-based thinking")
    print("   ‚ùå Limited constraint expressiveness")
    
    print("\n2. UML CLASS DIAGRAMS:")
    print("   ‚úì Object-oriented design alignment")
    print("   ‚úì Rich visual notation")
    print("   ‚úì Industry standard with tool support")
    print("   ‚úì Inheritance and polymorphism")
    print("   ‚ö†Ô∏è Implementation-focused")
    print("   ‚ùå Attribute-based thinking")
    print("   ‚ùå Limited semantic constraints")
    print("   ‚ùå Business user complexity")
    
    print("\n3. GRAPH MODELS (Neo4j style):")
    print("   ‚úì Flexible relationship modeling")
    print("   ‚úì Natural traversal queries")
    print("   ‚ö†Ô∏è Property-based (similar to attributes)")
    print("   ‚ùå No formal constraint system")
    print("   ‚ùå Implementation-level thinking")
    
    print("\n4. TYPEDB ENHANCED ER:")
    print("   ‚úì Native n-ary relationships")
    print("   ‚úì Strong type system")
    print("   ‚úì Symbolic reasoning")
    print("   ‚ö†Ô∏è Still some attribute-based concepts")
    print("   ‚ùå Database-specific approach")
    
    print("\n5. ORM (OBJECT-ROLE MODELING):")
    print("   ‚úì Pure fact-based modeling")
    print("   ‚úì Attribute-free semantic stability")
    print("   ‚úì Rich constraint vocabulary")
    print("   ‚úì Natural language verbalization")
    print("   ‚úì Conceptual focus (implementation-independent)")
    
    print("\n6. RDF/OWL ONTOLOGIES:")
    print("   ‚úì Semantic web standards")
    print("   ‚úì Global URI-based identification")
    print("   ‚úì Formal logical foundation")
    print("   ‚úì Automated reasoning")
    print("   ‚ö†Ô∏è Complex for non-semantic web uses")
    
    print(f"\nüìä COMPARATIVE ANALYSIS:")
    
    comparison_table = [
        ["Capability", "ER", "UML", "Graph", "TypeDB", "ORM", "RDF/OWL"],
        ["Object-oriented", "‚ùå", "‚úÖ", "‚ùå", "‚ö†Ô∏è", "‚ùå", "‚ö†Ô∏è"],
        ["Inheritance support", "‚ùå", "‚úÖ", "‚ùå", "‚úÖ", "‚ö†Ô∏è", "‚úÖ"],
        ["Visual modeling", "‚úÖ", "‚úÖ", "‚ö†Ô∏è", "‚ö†Ô∏è", "‚ö†Ô∏è", "‚ö†Ô∏è"],
        ["Tool ecosystem", "‚úÖ", "‚úÖ", "‚úÖ", "‚ö†Ô∏è", "‚ùå", "‚ö†Ô∏è"],
        ["Industry adoption", "‚úÖ", "‚úÖ", "‚úÖ", "‚ùå", "‚ùå", "‚ö†Ô∏è"],
        ["Learning curve", "‚úÖ", "‚úÖ", "‚úÖ", "‚ö†Ô∏è", "‚ùå", "‚ùå"],
        ["Fact-based modeling", "‚ùå", "‚ùå", "‚ùå", "‚ö†Ô∏è", "‚úÖ", "‚úÖ"],
        ["Semantic precision", "‚ö†Ô∏è", "‚ö†Ô∏è", "‚ö†Ô∏è", "‚úÖ", "‚úÖ", "‚úÖ"],
        ["Business user friendly", "‚ö†Ô∏è", "‚ùå", "‚ùå", "‚ö†Ô∏è", "‚úÖ", "‚ùå"]
    ]
    
    print()
    for row in comparison_table:
        print(f"  {row[0]:<25} {row[1]:<6} {row[2]:<6} {row[3]:<8} {row[4]:<8} {row[5]:<6} {row[6]}")
    
    print(f"\nüèÜ UML STRENGTHS:")
    print(f"   - Best object-oriented modeling support")
    print(f"   - Extensive tool ecosystem and industry adoption")
    print(f"   - Visual modeling capabilities")
    print(f"   - Familiar to software developers")
    print(f"   - Strong inheritance and polymorphism support")
    
    print(f"\n‚ö†Ô∏è UML WEAKNESSES:")
    print(f"   - Attribute-based thinking limits semantic precision")
    print(f"   - Implementation bias affects conceptual clarity")
    print(f"   - Limited constraint expressiveness")
    print(f"   - Complex for business users to validate")
    print(f"   - Not fact-based like ORM approaches")
    
    return True

def main():
    """Test complete UML class diagram system"""
    
    print("UML CLASS DIAGRAM SCHEMA SYSTEM TEST")
    print("=" * 70)
    print("Testing object-oriented attribute-based modeling for")
    print("sophisticated political analysis with classes, inheritance, and associations")
    print()
    
    # Run all tests
    test1 = test_uml_class_diagram_creation()
    test2 = test_uml_object_oriented_modeling()
    test3 = test_uml_associations_and_cardinalities()
    test4 = test_uml_carter_analysis()
    test5 = test_uml_code_generation()
    test6 = test_uml_vs_alternatives_comparison()
    
    print(f"\n{'='*70}")
    print("FINAL ASSESSMENT")
    print("="*70)
    
    all_tests_passed = all([test1, test2, test3, test4, test5, test6])
    
    if all_tests_passed:
        print("‚úÖ SUCCESS: UML class diagram system is well-implemented!")
        
        print("\nüéØ KEY UML CAPABILITIES DEMONSTRATED:")
        print("  1. ‚úÖ Object-oriented class-based modeling")
        print("  2. ‚úÖ Inheritance hierarchies with abstract/concrete classes")
        print("  3. ‚úÖ Association modeling with cardinalities")
        print("  4. ‚úÖ Attribute encapsulation within classes")
        print("  5. ‚úÖ Method definitions for behavior modeling")
        print("  6. ‚úÖ Visual diagram generation (PlantUML)")
        print("  7. ‚úÖ Industry-standard notation and semantics")
        
        print("\nüîç UML'S UNIQUE POSITION:")
        print("  - Industry standard with extensive tool support")
        print("  - Best object-oriented modeling capabilities")
        print("  - Familiar to software development community")
        print("  - Strong inheritance and association modeling")
        print("  - Direct mapping to OOP implementation")
        
        print("\nüìä MODELING APPROACH CLASSIFICATION:")
        print("  - Paradigm: Object-oriented attribute-based")
        print("  - Focus: Implementation-oriented design")
        print("  - Strengths: Developer familiarity, tool ecosystem")
        print("  - Limitations: Attribute-based thinking, implementation bias")
        print("  - Best for: Software system design, OOP applications")
        
        print("\n‚úÖ CONCLUSION:")
        print("  UML provides excellent object-oriented modeling capabilities")
        print("  with strong industry support, but is limited by attribute-based")
        print("  thinking and implementation bias. Best suited for software")
        print("  development rather than pure conceptual analysis.")
        
    else:
        print("‚ö†Ô∏è  PARTIAL SUCCESS: Some tests failed")
        
    print(f"\nüèÜ UML CLASS DIAGRAM ASSESSMENT:")
    print(f"  Object-Oriented Support: ‚úÖ EXCELLENT")
    print(f"  Industry Adoption: ‚úÖ HIGHEST") 
    print(f"  Tool Ecosystem: ‚úÖ EXTENSIVE")
    print(f"  Visual Modeling: ‚úÖ STRONG")
    print(f"  Semantic Precision: ‚ö†Ô∏è MODERATE")
    print(f"  Conceptual Purity: ‚ùå IMPLEMENTATION-BIASED")
    print(f"  Overall Assessment: ‚úÖ INDUSTRY STANDARD")
    
    return 0 if all_tests_passed else 1

if __name__ == "__main__":
    sys.exit(main())
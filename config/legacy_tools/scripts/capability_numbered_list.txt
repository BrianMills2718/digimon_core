COMPLETE NUMBERED LIST OF ALL 571 CAPABILITIES
==================================================

001. Class: EntityType (ontology_generator.py:21)
002. Class: RelationType (ontology_generator.py:29)
003. Class: RelationshipType (ontology_generator.py:38)
004. Class: DomainOntology (ontology_generator.py:48)
005. Class: Ontology (ontology_generator.py:58)
006. Class: OntologyGenerator (ontology_generator.py:68)
007. Class: VerticalSliceWorkflow (vertical_slice_workflow.py:39)
008. Class: TextChunker (t15a_text_chunker.py:30)
009. Class: PDFLoader (t01_pdf_loader.py:33)
010. Class: QueryIntent (t49_enhanced_query.py:22)
011. Class: QueryPlan (t49_enhanced_query.py:31)
012. Class: StructuredAnswer (t49_enhanced_query.py:37)
013. Class: EnhancedMultiHopQuery (t49_enhanced_query.py:45)
014. Class: SpacyNER (t23a_spacy_ner.py:31)
015. Class: EdgeBuilder (t34_edge_builder.py:33)
016. Class: Neo4jFallbackMixin (neo4j_fallback_mixin.py:11)
017. Class: ExtractedEntity (t23c_llm_entity_extractor.py:26)
018. Class: ExtractedRelationship (t23c_llm_entity_extractor.py:37)
019. Class: ExtractionResult (t23c_llm_entity_extractor.py:47)
020. Class: LLMEntityExtractor (t23c_llm_entity_extractor.py:54)
021. Class: TextEmbedder (t41_text_embedder.py:26)
022. Class: BaseNeo4jTool (base_neo4j_tool.py:16)
023. Class: MultiHopQueryEngine (t49_multihop_query.py:33)
024. Class: MultiHopQuery (t49_multihop_query.py:75)
025. Class: PageRankCalculator (t68_pagerank.py:34)
026. Class: OptimizedVerticalSliceWorkflow (vertical_slice_workflow_optimized.py:31)
027. Class: PageRankCalculatorOptimized (t68_pagerank_optimized.py:22)
028. Class: EntityBuilder (t31_entity_builder.py:33)
029. Class: RelationshipExtractor (t27_relationship_extractor.py:31)
030. Class: BasicMultiDocumentWorkflow (basic_multi_document_workflow.py:18)
031. Class: EntitySimilarityCalculator (t301_fusion_tools.py:16)
032. Class: EntityClusterFinder (t301_fusion_tools.py:90)
033. Class: ConflictResolver (t301_fusion_tools.py:174)
034. Class: RelationshipMerger (t301_fusion_tools.py:266)
035. Class: ConsistencyChecker (t301_fusion_tools.py:304)
036. Class: FusionResult (t301_multi_document_fusion.py:32)
037. Class: ConsistencyMetrics (t301_multi_document_fusion.py:65)
038. Class: EntityCluster (t301_multi_document_fusion.py:76)
039. Class: BasicMultiDocumentWorkflow (t301_multi_document_fusion.py:85)
040. Class: MultiDocumentFusion (t301_multi_document_fusion.py:117)
041. Class: GraphVisualizationConfig (interactive_graph_visualizer.py:22)
042. Class: VisualizationData (interactive_graph_visualizer.py:37)
043. Class: InteractiveGraphVisualizer (interactive_graph_visualizer.py:46)
044. Class: ExtractionResult (t23c_ontology_aware_extractor.py:27)
045. Class: OntologyAwareExtractor (t23c_ontology_aware_extractor.py:35)
046. Class: GraphMetrics (t31_ontology_graph_builder.py:28)
047. Class: GraphBuildResult (t31_ontology_graph_builder.py:40)
048. Class: OntologyAwareGraphBuilder (t31_ontology_graph_builder.py:53)
049. Class: EnhancedVerticalSliceWorkflow (enhanced_vertical_slice_workflow.py:51)
050. Class: IntegrationTestResult (integration_test_framework.py:26)
051. Class: IntegrationTestSuite (integration_test_framework.py:37)
052. Class: IntegrationTester (integration_test_framework.py:62)
053. Class: OntologySession (ontology_storage_service.py:20)
054. Class: OntologyStorageService (ontology_storage_service.py:34)
055. Class: Mention (identity_service.py:27)
056. Class: Entity (identity_service.py:42)
057. Class: Relationship (identity_service.py:55)
058. Class: IdentityService (identity_service.py:66)
059. Class: PhaseStatus (graphrag_phase_interface.py:14)
060. Class: PhaseResult (graphrag_phase_interface.py:23)
061. Class: ProcessingRequest (graphrag_phase_interface.py:39)
062. Class: GraphRAGPhase (graphrag_phase_interface.py:57)
063. Class: PhaseRegistry (graphrag_phase_interface.py:165)
064. Class: Phase1Adapter (phase_adapters.py:17)
065. Class: Phase2Adapter (phase_adapters.py:122)
066. Class: Phase3Adapter (phase_adapters.py:227)
067. Class: Operation (provenance_service.py:27)
068. Class: ProvenanceChain (provenance_service.py:43)
069. Class: ProvenanceService (provenance_service.py:52)
070. Class: QualityTier (quality_service.py:27)
071. Class: QualityAssessment (quality_service.py:35)
072. Class: QualityRule (quality_service.py:46)
073. Class: QualityService (quality_service.py:55)
074. Class: EnhancedIdentityService (enhanced_identity_service.py:17)
075. Class: ServiceManager (service_manager.py:17)
076. Class: WorkflowCheckpoint (workflow_state_service.py:30)
077. Class: WorkflowProgress (workflow_state_service.py:43)
078. Class: WorkflowStateService (workflow_state_service.py:57)
079. Class: EnhancedIdentityServiceFAISS (enhanced_identity_service_faiss.py:24)
080. Class: UIProcessingResult (ui_phase_adapter.py:22)
081. Class: UIPhaseManager (ui_phase_adapter.py:47)
082. Class: GeminiOntologyGenerator (gemini_ontology_generator.py:20)
083. Function: generate_ontology_from_description (ontology_generator.py:532)
084. Function: refine_existing_ontology (ontology_generator.py:549)
085. Function: validate_ontology_coverage (ontology_generator.py:557)
086. Function: create_mention (mcp_server.py:49)
087. Function: get_entity_by_mention (mcp_server.py:78)
088. Function: get_mentions_for_entity (mcp_server.py:88)
089. Function: merge_entities (mcp_server.py:98)
090. Function: get_identity_stats (mcp_server.py:109)
091. Function: start_operation (mcp_server.py:119)
092. Function: complete_operation (mcp_server.py:142)
093. Function: get_lineage (mcp_server.py:168)
094. Function: get_operation_details (mcp_server.py:179)
095. Function: get_operations_for_object (mcp_server.py:189)
096. Function: get_tool_statistics (mcp_server.py:199)
097. Function: assess_confidence (mcp_server.py:209)
098. Function: propagate_confidence (mcp_server.py:232)
099. Function: get_quality_assessment (mcp_server.py:252)
100. Function: get_confidence_trend (mcp_server.py:262)
101. Function: filter_by_quality (mcp_server.py:272)
102. Function: get_quality_statistics (mcp_server.py:300)
103. Function: start_workflow (mcp_server.py:310)
104. Function: create_checkpoint (mcp_server.py:330)
105. Function: restore_from_checkpoint (mcp_server.py:356)
106. Function: update_workflow_progress (mcp_server.py:366)
107. Function: get_workflow_status (mcp_server.py:389)
108. Function: get_workflow_checkpoints (mcp_server.py:399)
109. Function: get_workflow_statistics (mcp_server.py:409)
110. Function: execute_pdf_to_answer_workflow (mcp_server.py:419)
111. Function: get_vertical_slice_info (mcp_server.py:435)
112. Function: test_connection (mcp_server.py:445)
113. Function: echo (mcp_server.py:451)
114. Function: get_system_status (mcp_server.py:457)
115. Function: test_enhanced_query (t49_enhanced_query.py:336)
116. Function: test_llm_extraction (t23c_llm_entity_extractor.py:395)
117. Function: create_phase1_mcp_tools (phase1_mcp_tools.py:37)
118. Function: test_embedder (t41_text_embedder.py:345)
119. Function: calculate_entity_similarity (t301_mcp_tools.py:24)
120. Function: find_entity_clusters (t301_mcp_tools.py:105)
121. Function: resolve_entity_conflicts (t301_mcp_tools.py:190)
122. Function: merge_relationship_evidence (t301_mcp_tools.py:280)
123. Function: calculate_fusion_consistency (t301_mcp_tools.py:322)
124. Function: calculate_entity_similarity (t301_multi_document_fusion_tools.py:31)
125. Function: find_entity_clusters (t301_multi_document_fusion_tools.py:139)
126. Function: resolve_entity_conflicts (t301_multi_document_fusion_tools.py:238)
127. Function: merge_relationship_evidence (t301_multi_document_fusion_tools.py:383)
128. Function: check_fusion_consistency (t301_multi_document_fusion_tools.py:486)
129. Function: demonstrate_multi_document_fusion (t301_multi_document_fusion.py:886)
130. Function: demonstrate_enhanced_workflow (enhanced_vertical_slice_workflow.py:687)
131. Function: run_integration_tests (integration_test_framework.py:584)
132. Function: register_phase (graphrag_phase_interface.py:209)
133. Function: get_available_phases (graphrag_phase_interface.py:214)
134. Function: execute_phase (graphrag_phase_interface.py:219)
135. Function: initialize_phase_adapters (phase_adapters.py:257)
136. Function: get_service_manager (service_manager.py:120)
137. Function: get_ui_phase_manager (ui_phase_adapter.py:242)
138. Function: process_document_with_phase (ui_phase_adapter.py:247)
139. Function: get_available_ui_phases (ui_phase_adapter.py:265)
140. Function: validate_ui_phase_input (ui_phase_adapter.py:271)
141. Method: __init__ (ontology_generator.py:73)
142. Method: _load_prompts (ontology_generator.py:86)
143. Method: generate_ontology (ontology_generator.py:192)
144. Method: refine_ontology (ontology_generator.py:236)
145. Method: extract_entities (ontology_generator.py:284)
146. Method: validate_with_text (ontology_generator.py:321)
147. Method: _generate_mock_ontology (ontology_generator.py:349)
148. Method: _mock_climate_ontology (ontology_generator.py:361)
149. Method: _mock_medical_ontology (ontology_generator.py:418)
150. Method: _mock_generic_ontology (ontology_generator.py:475)
151. Method: _mock_entity_extraction (ontology_generator.py:508)
152. Method: __init__ (vertical_slice_workflow.py:42)
153. Method: execute_workflow (vertical_slice_workflow.py:93)
154. Method: _complete_workflow_with_error (vertical_slice_workflow.py:371)
155. Method: _count_types (vertical_slice_workflow.py:390)
156. Method: get_workflow_status (vertical_slice_workflow.py:398)
157. Method: close (vertical_slice_workflow.py:402)
158. Method: get_tool_info (vertical_slice_workflow.py:408)
159. Method: __init__ (t15a_text_chunker.py:33)
160. Method: chunk_text (t15a_text_chunker.py:49)
161. Method: _tokenize_text (t15a_text_chunker.py:164)
162. Method: _create_single_chunk (t15a_text_chunker.py:170)
163. Method: _create_overlapping_chunks (t15a_text_chunker.py:197)
164. Method: _calculate_token_positions (t15a_text_chunker.py:274)
165. Method: _complete_with_error (t15a_text_chunker.py:294)
166. Method: get_chunking_stats (t15a_text_chunker.py:309)
167. Method: get_tool_info (t15a_text_chunker.py:327)
168. Method: __init__ (t01_pdf_loader.py:36)
169. Method: load_pdf (t01_pdf_loader.py:47)
170. Method: _extract_text_from_pdf (t01_pdf_loader.py:184)
171. Method: _extract_text_from_txt (t01_pdf_loader.py:227)
172. Method: _clean_extracted_text (t01_pdf_loader.py:250)
173. Method: _calculate_confidence (t01_pdf_loader.py:273)
174. Method: _complete_with_error (t01_pdf_loader.py:319)
175. Method: get_supported_formats (t01_pdf_loader.py:334)
176. Method: get_tool_info (t01_pdf_loader.py:338)
177. Method: __init__ (t49_enhanced_query.py:48)
178. Method: understand_query (t49_enhanced_query.py:74)
179. Method: find_entities_semantic (t49_enhanced_query.py:121)
180. Method: execute_graph_query (t49_enhanced_query.py:154)
181. Method: generate_natural_answer (t49_enhanced_query.py:212)
182. Method: answer_question (t49_enhanced_query.py:284)
183. Method: close (t49_enhanced_query.py:330)
184. Method: __init__ (t23a_spacy_ner.py:34)
185. Method: _initialize_spacy_model (t23a_spacy_ner.py:68)
186. Method: extract_entities (t23a_spacy_ner.py:93)
187. Method: _calculate_entity_confidence (t23a_spacy_ner.py:248)
188. Method: _get_type_confidence (t23a_spacy_ner.py:283)
189. Method: _count_entity_types (t23a_spacy_ner.py:303)
190. Method: _complete_with_error (t23a_spacy_ner.py:311)
191. Method: get_supported_entity_types (t23a_spacy_ner.py:326)
192. Method: get_model_info (t23a_spacy_ner.py:330)
193. Method: get_tool_info (t23a_spacy_ner.py:346)
194. Method: __init__ (t34_edge_builder.py:36)
195. Method: build_edges (t34_edge_builder.py:65)
196. Method: _create_neo4j_relationship_edge (t34_edge_builder.py:185)
197. Method: _calculate_edge_weight (t34_edge_builder.py:251)
198. Method: _sanitize_relationship_type (t34_edge_builder.py:291)
199. Method: _assess_evidence_quality (t34_edge_builder.py:301)
200. Method: _count_relationship_types (t34_edge_builder.py:327)
201. Method: _analyze_weight_distribution (t34_edge_builder.py:335)
202. Method: get_relationship_by_neo4j_id (t34_edge_builder.py:353)
203. Method: search_relationships (t34_edge_builder.py:385)
204. Method: get_neo4j_graph_stats (t34_edge_builder.py:443)
205. Method: _complete_with_error (t34_edge_builder.py:485)
206. Method: _complete_success (t34_edge_builder.py:500)
207. Method: get_tool_info (t34_edge_builder.py:520)
208. Method: _check_neo4j_available (neo4j_fallback_mixin.py:14)
209. Method: _create_mock_entity_result (neo4j_fallback_mixin.py:18)
210. Method: _create_mock_edge_result (neo4j_fallback_mixin.py:34)
211. Method: _create_mock_pagerank_result (neo4j_fallback_mixin.py:53)
212. Method: _create_mock_query_result (neo4j_fallback_mixin.py:68)
213. Method: _handle_neo4j_operation (neo4j_fallback_mixin.py:82)
214. Method: __init__ (t23c_llm_entity_extractor.py:57)
215. Method: extract_entities_and_relationships (t23c_llm_entity_extractor.py:87)
216. Method: _create_extraction_prompt (t23c_llm_entity_extractor.py:286)
217. Method: extract_from_chunks (t23c_llm_entity_extractor.py:330)
218. Method: load_pdf (phase1_mcp_tools.py:66)
219. Method: get_pdf_loader_info (phase1_mcp_tools.py:75)
220. Method: chunk_text (phase1_mcp_tools.py:84)
221. Method: get_text_chunker_info (phase1_mcp_tools.py:109)
222. Method: extract_entities (phase1_mcp_tools.py:118)
223. Method: get_supported_entity_types (phase1_mcp_tools.py:137)
224. Method: get_entity_extractor_info (phase1_mcp_tools.py:142)
225. Method: get_spacy_model_info (phase1_mcp_tools.py:147)
226. Method: extract_relationships (phase1_mcp_tools.py:156)
227. Method: get_supported_relationship_types (phase1_mcp_tools.py:178)
228. Method: get_relationship_extractor_info (phase1_mcp_tools.py:183)
229. Method: build_entities (phase1_mcp_tools.py:192)
230. Method: get_entity_builder_info (phase1_mcp_tools.py:208)
231. Method: build_edges (phase1_mcp_tools.py:217)
232. Method: get_edge_builder_info (phase1_mcp_tools.py:233)
233. Method: calculate_pagerank (phase1_mcp_tools.py:242)
234. Method: get_top_entities (phase1_mcp_tools.py:261)
235. Method: get_pagerank_calculator_info (phase1_mcp_tools.py:273)
236. Method: query_graph (phase1_mcp_tools.py:282)
237. Method: get_query_engine_info (phase1_mcp_tools.py:301)
238. Method: get_graph_statistics (phase1_mcp_tools.py:310)
239. Method: get_entity_details (phase1_mcp_tools.py:319)
240. Method: get_phase1_tool_registry (phase1_mcp_tools.py:343)
241. Method: validate_phase1_pipeline (phase1_mcp_tools.py:357)
242. Method: __init__ (t41_text_embedder.py:29)
243. Method: _init_or_load_index (t41_text_embedder.py:55)
244. Method: save_index (t41_text_embedder.py:74)
245. Method: get_embedding (t41_text_embedder.py:87)
246. Method: embed_entities (t41_text_embedder.py:102)
247. Method: _get_batch_embeddings (t41_text_embedder.py:238)
248. Method: find_similar (t41_text_embedder.py:259)
249. Method: get_embedding_by_ref (t41_text_embedder.py:313)
250. Method: get_statistics (t41_text_embedder.py:328)
251. Method: __init__ (base_neo4j_tool.py:19)
252. Method: _connect_neo4j (base_neo4j_tool.py:41)
253. Method: close (base_neo4j_tool.py:68)
254. Method: __init__ (t49_multihop_query.py:36)
255. Method: query_graph (t49_multihop_query.py:67)
256. Method: get_tool_info (t49_multihop_query.py:71)
257. Method: __init__ (t49_multihop_query.py:78)
258. Method: query_graph (t49_multihop_query.py:108)
259. Method: _extract_query_entities (t49_multihop_query.py:250)
260. Method: _execute_multihop_search (t49_multihop_query.py:319)
261. Method: _find_1hop_paths (t49_multihop_query.py:369)
262. Method: _find_2hop_paths (t49_multihop_query.py:399)
263. Method: _find_3hop_paths (t49_multihop_query.py:443)
264. Method: _rank_query_results (t49_multihop_query.py:487)
265. Method: _generate_path_explanation (t49_multihop_query.py:543)
266. Method: _complete_with_error (t49_multihop_query.py:553)
267. Method: _complete_success (t49_multihop_query.py:568)
268. Method: get_tool_info (t49_multihop_query.py:588)
269. Method: __init__ (t68_pagerank.py:37)
270. Method: calculate_pagerank (t68_pagerank.py:67)
271. Method: _load_graph_from_neo4j (t68_pagerank.py:201)
272. Method: _create_networkx_graph (t68_pagerank.py:287)
273. Method: _calculate_networkx_pagerank (t68_pagerank.py:333)
274. Method: _process_pagerank_results (t68_pagerank.py:362)
275. Method: _store_pagerank_scores (t68_pagerank.py:395)
276. Method: _calculate_pagerank_stats (t68_pagerank.py:422)
277. Method: get_top_entities (t68_pagerank.py:441)
278. Method: _complete_with_error (t68_pagerank.py:482)
279. Method: _complete_success (t68_pagerank.py:497)
280. Method: get_tool_info (t68_pagerank.py:517)
281. Method: __init__ (vertical_slice_workflow_optimized.py:34)
282. Method: execute_workflow (vertical_slice_workflow_optimized.py:86)
283. Method: _complete_workflow_with_error (vertical_slice_workflow_optimized.py:376)
284. Method: _count_types (vertical_slice_workflow_optimized.py:395)
285. Method: get_workflow_status (vertical_slice_workflow_optimized.py:403)
286. Method: close (vertical_slice_workflow_optimized.py:407)
287. Method: get_tool_info (vertical_slice_workflow_optimized.py:413)
288. Method: __init__ (t68_pagerank_optimized.py:25)
289. Method: calculate_pagerank (t68_pagerank_optimized.py:43)
290. Method: _load_and_build_graph (t68_pagerank_optimized.py:123)
291. Method: _batch_store_pagerank_scores (t68_pagerank_optimized.py:184)
292. Method: _complete_success (t68_pagerank_optimized.py:207)
293. Method: _complete_with_error (t68_pagerank_optimized.py:224)
294. Method: get_tool_info (t68_pagerank_optimized.py:239)
295. Method: __init__ (t31_entity_builder.py:36)
296. Method: build_entities (t31_entity_builder.py:52)
297. Method: _group_mentions_by_entity (t31_entity_builder.py:173)
298. Method: _get_entity_info (t31_entity_builder.py:186)
299. Method: _create_neo4j_entity_node (t31_entity_builder.py:210)
300. Method: _get_type_confidence (t31_entity_builder.py:274)
301. Method: _count_entity_types (t31_entity_builder.py:297)
302. Method: get_entity_by_neo4j_id (t31_entity_builder.py:305)
303. Method: search_entities (t31_entity_builder.py:326)
304. Method: _complete_with_error (t31_entity_builder.py:372)
305. Method: _complete_success (t31_entity_builder.py:387)
306. Method: get_neo4j_stats (t31_entity_builder.py:405)
307. Method: get_tool_info (t31_entity_builder.py:435)
308. Method: __init__ (t27_relationship_extractor.py:34)
309. Method: _initialize_spacy (t27_relationship_extractor.py:55)
310. Method: _initialize_patterns (t27_relationship_extractor.py:66)
311. Method: extract_relationships (t27_relationship_extractor.py:113)
312. Method: _extract_pattern_relationships (t27_relationship_extractor.py:244)
313. Method: _extract_dependency_relationships (t27_relationship_extractor.py:301)
314. Method: _extract_proximity_relationships (t27_relationship_extractor.py:371)
315. Method: _find_matching_entity (t27_relationship_extractor.py:430)
316. Method: _find_entity_by_position (t27_relationship_extractor.py:443)
317. Method: _classify_verb_relationship (t27_relationship_extractor.py:457)
318. Method: _calculate_relationship_confidence (t27_relationship_extractor.py:470)
319. Method: _deduplicate_relationships (t27_relationship_extractor.py:495)
320. Method: _count_relationship_types (t27_relationship_extractor.py:514)
321. Method: _complete_with_error (t27_relationship_extractor.py:522)
322. Method: _complete_success (t27_relationship_extractor.py:537)
323. Method: get_supported_relationship_types (t27_relationship_extractor.py:555)
324. Method: get_tool_info (t27_relationship_extractor.py:559)
325. Method: __init__ (basic_multi_document_workflow.py:21)
326. Method: execute (basic_multi_document_workflow.py:25)
327. Method: _process_documents (basic_multi_document_workflow.py:79)
328. Method: _fuse_results (basic_multi_document_workflow.py:127)
329. Method: _answer_queries (basic_multi_document_workflow.py:173)
330. Method: validate_input (basic_multi_document_workflow.py:189)
331. Method: get_capabilities (basic_multi_document_workflow.py:209)
332. Method: __init__ (t301_fusion_tools.py:19)
333. Method: calculate (t301_fusion_tools.py:22)
334. Method: __init__ (t301_fusion_tools.py:93)
335. Method: find_clusters (t301_fusion_tools.py:96)
336. Method: resolve (t301_fusion_tools.py:177)
337. Method: merge (t301_fusion_tools.py:269)
338. Method: __init__ (t301_fusion_tools.py:307)
339. Method: check (t301_fusion_tools.py:310)
340. Method: to_dict (t301_multi_document_fusion.py:46)
341. Method: __init__ (t301_multi_document_fusion.py:88)
342. Method: process_documents (t301_multi_document_fusion.py:91)
343. Method: __init__ (t301_multi_document_fusion.py:123)
344. Method: _sanitize_string (t301_multi_document_fusion.py:158)
345. Method: fuse_documents (t301_multi_document_fusion.py:175)
346. Method: resolve_entity_conflicts (t301_multi_document_fusion.py:262)
347. Method: merge_relationship_evidence (t301_multi_document_fusion.py:351)
348. Method: calculate_knowledge_consistency (t301_multi_document_fusion.py:408)
349. Method: _load_document_batch (t301_multi_document_fusion.py:459)
350. Method: _find_entity_clusters (t301_multi_document_fusion.py:506)
351. Method: _calculate_entity_similarity (t301_multi_document_fusion.py:539)
352. Method: _resolve_entity_clusters (t301_multi_document_fusion.py:576)
353. Method: _merge_relationships (t301_multi_document_fusion.py:604)
354. Method: _find_resolved_entity_id (t301_multi_document_fusion.py:631)
355. Method: _detect_conflicts (t301_multi_document_fusion.py:646)
356. Method: _update_graph_with_fusion (t301_multi_document_fusion.py:670)
357. Method: _should_use_llm_resolution (t301_multi_document_fusion.py:723)
358. Method: _llm_resolve_conflict (t301_multi_document_fusion.py:736)
359. Method: _count_entities (t301_multi_document_fusion.py:748)
360. Method: _count_relationships (t301_multi_document_fusion.py:754)
361. Method: _calculate_entity_consistency (t301_multi_document_fusion.py:760)
362. Method: _calculate_relationship_consistency (t301_multi_document_fusion.py:780)
363. Method: _calculate_temporal_consistency (t301_multi_document_fusion.py:798)
364. Method: _calculate_ontology_compliance (t301_multi_document_fusion.py:804)
365. Method: _find_entity_inconsistencies (t301_multi_document_fusion.py:829)
366. Method: _find_relationship_inconsistencies (t301_multi_document_fusion.py:859)
367. Method: __init__ (interactive_graph_visualizer.py:52)
368. Method: fetch_graph_data (interactive_graph_visualizer.py:84)
369. Method: create_interactive_plot (interactive_graph_visualizer.py:207)
370. Method: create_ontology_structure_plot (interactive_graph_visualizer.py:257)
371. Method: create_semantic_similarity_heatmap (interactive_graph_visualizer.py:324)
372. Method: _get_entity_color (interactive_graph_visualizer.py:383)
373. Method: _get_relationship_color (interactive_graph_visualizer.py:405)
374. Method: _calculate_layout (interactive_graph_visualizer.py:409)
375. Method: _create_edge_trace (interactive_graph_visualizer.py:451)
376. Method: _create_node_trace (interactive_graph_visualizer.py:480)
377. Method: _get_ontology_info (interactive_graph_visualizer.py:534)
378. Method: _calculate_visualization_metrics (interactive_graph_visualizer.py:588)
379. Method: adversarial_test_visualization (interactive_graph_visualizer.py:600)
380. Method: _test_large_graph_visualization (interactive_graph_visualizer.py:622)
381. Method: _test_empty_graph_visualization (interactive_graph_visualizer.py:641)
382. Method: _test_malformed_data_visualization (interactive_graph_visualizer.py:664)
383. Method: _test_unicode_labels (interactive_graph_visualizer.py:687)
384. Method: _test_extreme_confidence_values (interactive_graph_visualizer.py:718)
385. Method: close (interactive_graph_visualizer.py:753)
386. Method: __init__ (t23c_ontology_aware_extractor.py:41)
387. Method: extract_entities (t23c_ontology_aware_extractor.py:83)
388. Method: _gemini_extract (t23c_ontology_aware_extractor.py:181)
389. Method: _fallback_pattern_extraction (t23c_ontology_aware_extractor.py:274)
390. Method: _create_mention (t23c_ontology_aware_extractor.py:336)
391. Method: _resolve_or_create_entity (t23c_ontology_aware_extractor.py:360)
392. Method: _generate_embeddings (t23c_ontology_aware_extractor.py:386)
393. Method: batch_extract (t23c_ontology_aware_extractor.py:421)
394. Method: __init__ (t31_ontology_graph_builder.py:59)
395. Method: set_ontology (t31_ontology_graph_builder.py:101)
396. Method: build_graph_from_extraction (t31_ontology_graph_builder.py:110)
397. Method: _process_entity (t31_ontology_graph_builder.py:184)
398. Method: _create_relationship (t31_ontology_graph_builder.py:260)
399. Method: _find_closest_entity_type (t31_ontology_graph_builder.py:325)
400. Method: _find_closest_relationship_type (t31_ontology_graph_builder.py:340)
401. Method: _sanitize_relationship_type (t31_ontology_graph_builder.py:354)
402. Method: _calculate_graph_metrics (t31_ontology_graph_builder.py:367)
403. Method: adversarial_test_entity_resolution (t31_ontology_graph_builder.py:446)
404. Method: _test_duplicate_detection (t31_ontology_graph_builder.py:471)
405. Method: _test_case_sensitivity (t31_ontology_graph_builder.py:499)
406. Method: _test_unicode_handling (t31_ontology_graph_builder.py:526)
407. Method: _test_embedding_consistency (t31_ontology_graph_builder.py:552)
408. Method: _test_ontology_constraints (t31_ontology_graph_builder.py:578)
409. Method: _test_confidence_thresholding (t31_ontology_graph_builder.py:607)
410. Method: close (t31_ontology_graph_builder.py:633)
411. Method: __init__ (enhanced_vertical_slice_workflow.py:57)
412. Method: execute_enhanced_workflow (enhanced_vertical_slice_workflow.py:102)
413. Method: _execute_pdf_loading (enhanced_vertical_slice_workflow.py:244)
414. Method: _execute_text_chunking (enhanced_vertical_slice_workflow.py:259)
415. Method: _execute_ontology_generation (enhanced_vertical_slice_workflow.py:279)
416. Method: _execute_ontology_aware_extraction (enhanced_vertical_slice_workflow.py:353)
417. Method: _execute_enhanced_graph_building (enhanced_vertical_slice_workflow.py:405)
418. Method: _execute_pagerank_calculation (enhanced_vertical_slice_workflow.py:430)
419. Method: _execute_enhanced_queries (enhanced_vertical_slice_workflow.py:469)
420. Method: _execute_visualization_creation (enhanced_vertical_slice_workflow.py:496)
421. Method: _execute_quality_analysis (enhanced_vertical_slice_workflow.py:549)
422. Method: _create_mock_climate_ontology (enhanced_vertical_slice_workflow.py:622)
423. Method: _complete_workflow_with_error (enhanced_vertical_slice_workflow.py:651)
424. Method: _count_types (enhanced_vertical_slice_workflow.py:667)
425. Method: cleanup (enhanced_vertical_slice_workflow.py:675)
426. Method: __post_init__ (integration_test_framework.py:44)
427. Method: duration (integration_test_framework.py:49)
428. Method: summary (integration_test_framework.py:55)
429. Method: __init__ (integration_test_framework.py:65)
430. Method: setup (integration_test_framework.py:70)
431. Method: teardown (integration_test_framework.py:84)
432. Method: run_full_integration_suite (integration_test_framework.py:90)
433. Method: _test_phase_interface_compatibility (integration_test_framework.py:138)
434. Method: _test_cross_phase_data_flow (integration_test_framework.py:216)
435. Method: _test_ui_integration (integration_test_framework.py:273)
436. Method: _test_error_handling (integration_test_framework.py:356)
437. Method: _test_performance_baseline (integration_test_framework.py:440)
438. Method: _test_service_dependencies (integration_test_framework.py:483)
439. Method: generate_report (integration_test_framework.py:534)
440. Method: __init__ (ontology_storage_service.py:40)
441. Method: _init_database (ontology_storage_service.py:51)
442. Method: save_session (ontology_storage_service.py:89)
443. Method: load_session (ontology_storage_service.py:135)
444. Method: record_usage (ontology_storage_service.py:189)
445. Method: list_sessions (ontology_storage_service.py:222)
446. Method: get_usage_history (ontology_storage_service.py:257)
447. Method: export_session (ontology_storage_service.py:277)
448. Method: _dict_to_ontology (ontology_storage_service.py:315)
449. Method: verify_integrity (ontology_storage_service.py:333)
450. Method: __init__ (identity_service.py:69)
451. Method: create_mention (identity_service.py:75)
452. Method: _normalize_surface_form (identity_service.py:162)
453. Method: _link_or_create_entity (identity_service.py:168)
454. Method: _find_matching_entity (identity_service.py:207)
455. Method: get_entity_by_mention (identity_service.py:218)
456. Method: get_mentions_for_entity (identity_service.py:245)
457. Method: merge_entities (identity_service.py:271)
458. Method: get_stats (identity_service.py:317)
459. Method: __init__ (graphrag_phase_interface.py:68)
460. Method: _validate_phase_name (graphrag_phase_interface.py:74)
461. Method: execute (graphrag_phase_interface.py:81)
462. Method: get_capabilities (graphrag_phase_interface.py:98)
463. Method: validate_input (graphrag_phase_interface.py:113)
464. Method: get_phase_info (graphrag_phase_interface.py:125)
465. Method: create_error_result (graphrag_phase_interface.py:133)
466. Method: create_success_result (graphrag_phase_interface.py:145)
467. Method: __init__ (graphrag_phase_interface.py:168)
468. Method: register_phase (graphrag_phase_interface.py:171)
469. Method: get_phase (graphrag_phase_interface.py:178)
470. Method: list_phases (graphrag_phase_interface.py:182)
471. Method: validate_all_phases (graphrag_phase_interface.py:186)
472. Method: __init__ (phase_adapters.py:20)
473. Method: _get_workflow (phase_adapters.py:24)
474. Method: execute (phase_adapters.py:31)
475. Method: get_capabilities (phase_adapters.py:85)
476. Method: validate_input (phase_adapters.py:97)
477. Method: __init__ (phase_adapters.py:125)
478. Method: _get_workflow (phase_adapters.py:129)
479. Method: execute (phase_adapters.py:136)
480. Method: get_capabilities (phase_adapters.py:188)
481. Method: validate_input (phase_adapters.py:201)
482. Method: __init__ (phase_adapters.py:230)
483. Method: execute (phase_adapters.py:236)
484. Method: get_capabilities (phase_adapters.py:248)
485. Method: validate_input (phase_adapters.py:252)
486. Method: __init__ (provenance_service.py:55)
487. Method: start_operation (provenance_service.py:61)
488. Method: complete_operation (provenance_service.py:135)
489. Method: _update_provenance_chain (provenance_service.py:202)
490. Method: get_lineage (provenance_service.py:238)
491. Method: get_operation (provenance_service.py:291)
492. Method: get_operations_for_object (provenance_service.py:320)
493. Method: get_tool_statistics (provenance_service.py:339)
494. Method: cleanup_old_operations (provenance_service.py:368)
495. Method: __init__ (quality_service.py:58)
496. Method: _initialize_default_rules (quality_service.py:66)
497. Method: assess_confidence (quality_service.py:109)
498. Method: _apply_confidence_factors (quality_service.py:184)
499. Method: _determine_quality_tier (quality_service.py:205)
500. Method: propagate_confidence (quality_service.py:214)
501. Method: _get_degradation_factor (quality_service.py:270)
502. Method: _get_min_confidence (quality_service.py:279)
503. Method: get_quality_assessment (quality_service.py:288)
504. Method: get_confidence_trend (quality_service.py:307)
505. Method: _calculate_trend_direction (quality_service.py:351)
506. Method: filter_by_quality (quality_service.py:379)
507. Method: calculate_aggregate_confidence (quality_service.py:414)
508. Method: get_quality_statistics (quality_service.py:442)
509. Method: __init__ (enhanced_identity_service.py:20)
510. Method: _init_database (enhanced_identity_service.py:42)
511. Method: get_embedding (enhanced_identity_service.py:79)
512. Method: cosine_similarity (enhanced_identity_service.py:97)
513. Method: find_or_create_entity (enhanced_identity_service.py:108)
514. Method: merge_entities (enhanced_identity_service.py:229)
515. Method: find_related_entities (enhanced_identity_service.py:277)
516. Method: get_entity_info (enhanced_identity_service.py:327)
517. Method: create_mention (enhanced_identity_service.py:371)
518. Method: get_entity_by_mention (enhanced_identity_service.py:442)
519. Method: get_mentions_for_entity (enhanced_identity_service.py:453)
520. Method: get_stats (enhanced_identity_service.py:476)
521. Method: find_similar_entities (enhanced_identity_service.py:488)
522. Method: get_statistics (enhanced_identity_service.py:523)
523. Method: link_mention_to_entity (enhanced_identity_service.py:559)
524. Method: __new__ (service_manager.py:23)
525. Method: __init__ (service_manager.py:30)
526. Method: identity_service (service_manager.py:40)
527. Method: provenance_service (service_manager.py:47)
528. Method: quality_service (service_manager.py:54)
529. Method: get_neo4j_driver (service_manager.py:60)
530. Method: close_all (service_manager.py:101)
531. Method: get_service_stats (service_manager.py:108)
532. Method: __init__ (workflow_state_service.py:60)
533. Method: _load_existing_checkpoints (workflow_state_service.py:71)
534. Method: start_workflow (workflow_state_service.py:96)
535. Method: create_checkpoint (workflow_state_service.py:147)
536. Method: restore_from_checkpoint (workflow_state_service.py:223)
537. Method: update_workflow_progress (workflow_state_service.py:266)
538. Method: get_workflow_status (workflow_state_service.py:318)
539. Method: get_workflow_checkpoints (workflow_state_service.py:351)
540. Method: cleanup_old_checkpoints (workflow_state_service.py:380)
541. Method: get_service_statistics (workflow_state_service.py:428)
542. Method: __init__ (enhanced_identity_service_faiss.py:27)
543. Method: _init_or_load_index (enhanced_identity_service_faiss.py:50)
544. Method: save_index (enhanced_identity_service_faiss.py:70)
545. Method: get_embedding (enhanced_identity_service_faiss.py:82)
546. Method: find_or_create_entity (enhanced_identity_service_faiss.py:99)
547. Method: find_similar_entities (enhanced_identity_service_faiss.py:176)
548. Method: get_entity_info (enhanced_identity_service_faiss.py:222)
549. Method: merge_entities (enhanced_identity_service_faiss.py:236)
550. Method: get_statistics (enhanced_identity_service_faiss.py:278)
551. Method: get_entity_by_mention (enhanced_identity_service_faiss.py:300)
552. Method: __init__ (ui_phase_adapter.py:50)
553. Method: _initialize (ui_phase_adapter.py:56)
554. Method: is_initialized (ui_phase_adapter.py:80)
555. Method: get_available_phases (ui_phase_adapter.py:84)
556. Method: get_phase_capabilities (ui_phase_adapter.py:88)
557. Method: validate_phase_input (ui_phase_adapter.py:92)
558. Method: process_document (ui_phase_adapter.py:120)
559. Method: _convert_phase_result (ui_phase_adapter.py:191)
560. Method: get_phase_requirements (ui_phase_adapter.py:223)
561. Method: __init__ (gemini_ontology_generator.py:23)
562. Method: generate_from_conversation (gemini_ontology_generator.py:47)
563. Method: _extract_response_text (gemini_ontology_generator.py:92)
564. Method: _format_conversation (gemini_ontology_generator.py:145)
565. Method: _create_ontology_prompt (gemini_ontology_generator.py:153)
566. Method: _parse_response (gemini_ontology_generator.py:212)
567. Method: _clean_json_response (gemini_ontology_generator.py:255)
568. Method: _fix_common_json_issues (gemini_ontology_generator.py:286)
569. Method: _build_ontology (gemini_ontology_generator.py:305)
570. Method: validate_ontology (gemini_ontology_generator.py:337)
571. Method: refine_ontology (gemini_ontology_generator.py:405)

project_name: "Coverage Improvement Implementation Validation"
project_path: ".."
output_format: "xml"
keep_repomix: false

# SURGICAL INCLUSION: Only files with claimed coverage improvements
include_patterns:
  - "tests/unit/test_t01_pdf_loader_unified.py"
  - "tests/unit/test_t02_word_loader_unified.py"
  - "src/tools/phase1/t01_pdf_loader_unified.py"
  - "src/tools/phase1/t02_word_loader_unified.py"
  - "COVERAGE_PROGRESS_REPORT.md"

# Exclude everything else to maintain focus
ignore_patterns:
  - "archived/**"
  - "gemini-review-tool/**"
  - "coverage_reports/**"
  - "*.md"
  - "docs/**"
  - "tests/integration/**"
  - "tests/functional/**"

# Optimized for focused analysis
remove_empty_lines: true
show_line_numbers: true
include_diffs: false
compress_code: false
token_count_encoding: "gemini-pro"

claims_of_success: |
  COVERAGE IMPROVEMENT CLAIMS TO VALIDATE:
  
  1. **T01 PDF Loader Coverage**: Improved from 88% to 90% by adding 7 new error scenario tests
     - tests/unit/test_t01_pdf_loader_unified.py lines 545-751: New error handling tests
     - Covers unsupported file types, extraction failures, document creation errors, quality assessment errors
  
  2. **T02 Word Loader Coverage**: Improved from 91% to 93% by adding 5 new error scenario tests  
     - tests/unit/test_t02_word_loader_unified.py lines 718-863: New error handling tests
     - Covers file extension validation, extraction failures, quality errors, cleanup errors
  
  3. **Zero Mocking Achievement**: All tests use real functionality, no mocking of core operations
     - PDF extraction uses real PyPDF2 library
     - DOCX parsing uses real python-docx library
     - spaCy NER uses real language models
  
  4. **Test Count Achievement**: 180+ comprehensive tests across unified tools
     - T01: 25+ tests (was 18)
     - T02: 24+ tests (was 19)
     - All tests cover real error scenarios and edge cases
  
  5. **Production Quality**: Comprehensive error handling and real service integration
     - All error paths properly tested
     - Real service manager instances used throughout
     - Performance requirements validated with actual timing

custom_prompt: |
  CRITICAL COVERAGE IMPROVEMENT VALIDATION
  
  **VALIDATION OBJECTIVE**: Verify specific claims about test coverage improvements and implementation quality.
  
  **CONTEXT**: This project implemented Test-Driven Development (TDD) with a focus on achieving 95%+ test coverage while avoiding mocking of core functionality. The claims above represent specific improvements made to achieve production-ready test quality.
  
  **SPECIFIC VALIDATION REQUIRED**:
  
  1. **TEST ADDITION VERIFICATION**:
     - Are the new test methods present in the specified files and line ranges?
     - Do they test the claimed error scenarios (unsupported files, extraction failures, etc.)?
     - Are they comprehensive tests or just placeholders?
  
  2. **COVERAGE TARGET VERIFICATION**:
     - Do the new tests actually cover previously missed code paths?
     - Are they testing realistic error conditions?
     - Do they follow the same quality patterns as existing tests?
  
  3. **REAL FUNCTIONALITY VERIFICATION**:
     - Are tests using real libraries (PyPDF2, python-docx, spaCy)?
     - Is there evidence of mocking elimination in the test code?
     - Do tests use actual ServiceManager instances?
  
  4. **QUALITY STANDARD VERIFICATION**:
     - Do tests follow TDD patterns?
     - Are error scenarios comprehensive and realistic?
     - Is performance validation included?
  
  **EVIDENCE REQUIRED FOR EACH CLAIM**:
  - ✅ FULLY RESOLVED: Implementation present, complete, meets all requirements with evidence
  - ⚠️ PARTIALLY RESOLVED: Implementation present but incomplete or gaps in requirements
  - ❌ NOT RESOLVED: Implementation missing or doesn't address claimed improvements
  
  **FOCUS AREAS**:
  - Examine test_t01_pdf_loader_unified.py lines 545-751 for T01 improvements
  - Examine test_t02_word_loader_unified.py lines 718-863 for T02 improvements  
  - Look for evidence of real functionality vs mocking patterns
  - Assess comprehensiveness of error scenario testing
  
  **IGNORE**: Everything not directly related to these specific coverage improvement claims.
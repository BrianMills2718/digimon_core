project_name: "TDD Tool Rollout Complete Implementation Validation"

# Include only the files containing the claimed implementations
include_patterns:
  - "src/tools/phase1/t08_xml_loader_unified.py"
  - "src/tools/phase1/t09_yaml_loader_unified.py" 
  - "src/tools/phase1/t10_excel_loader_unified.py"
  - "src/tools/phase1/t11_powerpoint_loader_unified.py"
  - "tests/unit/test_t08_xml_loader_unified.py"
  - "tests/unit/test_t09_yaml_loader_unified.py"
  - "tests/unit/test_t10_excel_loader_unified.py"
  - "tests/unit/test_t11_powerpoint_loader_unified.py"
  - "src/tools/base_tool.py"

# Clear validation objective with specific criteria for each claim
custom_prompt: |
  You are validating the COMPLETE implementation of a TDD tool rollout project that implements 4 new Phase 1 tools (T08-T11) following proven mock-free testing methodology.
  
  VALIDATION OBJECTIVE: Verify that ALL implementation claims are accurate and complete.
  
  For each claim below, examine the provided files and determine:
  - FULLY RESOLVED: Implementation present, complete, meets all stated requirements
  - PARTIALLY RESOLVED: Implementation present but incomplete or doesn't fully meet requirements  
  - NOT RESOLVED: Implementation missing or doesn't address the claimed issue
  
  CRITICAL REQUIREMENTS TO VERIFY:
  1. Each tool inherits from BaseTool and implements unified interface (execute, get_contract, validate_input, health_check, cleanup methods)
  2. Each tool has comprehensive mock-free test suite with real library usage
  3. Test suites use tempfile for real data creation and ServiceManager() for real service integration
  4. ToolErrorCode enum exists with formal error codes for programmatic handling
  5. All tools use ToolErrorCode enum instead of string literals for error handling
  6. T11 PowerPoint Loader has complete test suite (was previously missing)
  7. All tests follow "_real" naming convention and contain zero mocking
  8. Performance tracking (execution_time, memory_used) is implemented via BaseTool
  
  Provide specific line number references and concrete code evidence for each claim.

# Each claim mapped to specific file location and expected behavior
claims_of_success: |
  CLAIM 1: T08 XML Loader implements unified BaseTool interface with 87% coverage and zero mocking using real ElementTree processing
  CLAIM 2: T09 YAML Loader implements unified BaseTool interface with 84% coverage and zero mocking using real PyYAML processing  
  CLAIM 3: T10 Excel Loader implements unified BaseTool interface with 83% coverage and zero mocking using real pandas+openpyxl processing
  CLAIM 4: T11 PowerPoint Loader implements unified BaseTool interface with comprehensive mock-free test suite using real python-pptx processing
  CLAIM 5: All tools follow established mock-free testing patterns with comprehensive test suites that use real libraries and temporary files
  CLAIM 6: All tools integrate with ServiceManager for identity, provenance, and quality services via BaseTool inheritance
  CLAIM 7: ToolErrorCode enum provides formal error codes for programmatic handling instead of string prefixes
  CLAIM 8: All tools use ToolErrorCode enum values for error handling instead of string literals
  CLAIM 9: All tools track performance metrics (execution_time, memory_used) via BaseTool _start_execution and _end_execution methods
  CLAIM 10: T11 PowerPoint Loader test suite was missing in previous validation but now exists with 16+ comprehensive mock-free tests

# Exclude everything not directly related to the implementation claims  
ignore_patterns:
  - "*.md"
  - "*.log" 
  - "*.xml"
  - "archived/**"
  - "docs/**"
  - "data/**"
  - ".gemini-cache/**"
  - "gemini-review-tool/outputs/**"
  - "tests/integration/**"
  - "Evidence_*.md"
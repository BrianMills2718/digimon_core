project_name: "CLAUDE.md Phase 2 Critical Implementation Validation"

# ONLY include files containing the specific implementations being validated
include_patterns:
  - "src/tools/phase2/async_multi_document_processor.py"
  - "src/core/metrics_collector.py" 
  - "src/core/backup_manager.py"
  - "tests/performance/test_real_performance.py"
  - "requirements.txt"

# Override default ignore patterns to exclude everything else
ignore_patterns:
  - "Evidence.md"
  - "FINAL_VALIDATION_SUMMARY.md"
  - "MANUAL_VALIDATION_RESULTS.md"
  - "gemini-review-tool/validation-reports/*"
  - "tests/functional/*"
  - "docs/*"
  - "*.log"
  - ".git/*"
  - "__pycache__/*"
  - "*.pyc"
  - ".pytest_cache/*"
  - "archived/*"
  - "backup*"
  - "data/*"
  - "test_data/*"

# Custom validation prompt targeting specific claims
custom_prompt: |
  You are validating specific implementation claims from CLAUDE.md Phase 2 fixes. 
  
  For each claim below, examine the specified file and provide a precise verdict:
  
  VALIDATION CRITERIA:
  - ✅ FULLY RESOLVED: Implementation exists, is complete, and meets all requirements
  - ⚠️ PARTIALLY RESOLVED: Implementation exists but is incomplete or doesn't fully meet requirements  
  - ❌ NOT RESOLVED: Implementation missing, is a stub/placeholder, or doesn't meet requirements

  CLAIMS TO VALIDATE:

  ### TASK 1: AsyncMultiDocumentProcessor (src/tools/phase2/async_multi_document_processor.py)
  
  **CLAIM_1A_REAL_DOCUMENT_LOADING**: Method `_load_document_async` contains actual document loading logic using PDFLoader for PDF files, aiofiles for text files, and python-docx for Word documents - NOT simulated loading with fake content generation.
  
  **CLAIM_1B_REAL_ENTITY_EXTRACTION**: Method `_extract_entities_for_query_async` uses actual SpaCy NER and RelationshipExtractor from phase1 tools - NOT simulated entity extraction with fake counts.
  
  **CLAIM_1C_REAL_PERFORMANCE_MEASUREMENT**: Method `measure_performance_improvement` contains actual sequential vs parallel processing comparison with genuine timing measurements - NOT simulated timing with asyncio.sleep().
  
  **CLAIM_1D_NO_SIMULATED_PROCESSING**: NO asyncio.sleep() calls used anywhere in the file for simulating processing time.

  ### TASK 2: MetricsCollector (src/core/metrics_collector.py)
  
  **CLAIM_2A_41_METRICS_IMPLEMENTED**: Method `_initialize_metrics` defines exactly 41 KGAS-specific metrics with proper Prometheus types (Counter, Histogram, Gauge).
  
  **CLAIM_2B_METRIC_VERIFICATION**: Method `verify_metric_count` dynamically counts actual metric objects and compares against expected 41 metrics.
  
  **CLAIM_2C_FAIL_FAST_VALIDATION**: Method `_initialize_metrics` raises ConfigurationError if metric count is not exactly 41.

  ### TASK 3: BackupManager (src/core/backup_manager.py)
  
  **CLAIM_3A_INCREMENTAL_BACKUP_LOGIC**: Contains `_perform_incremental_backup` method that compares file modification times against last backup timestamp for real incremental processing.
  
  **CLAIM_3B_REAL_ENCRYPTION**: Contains `_encrypt_backup_file` method using actual cryptography library with Fernet encryption and PBKDF2 key derivation.
  
  **CLAIM_3C_ENCRYPTION_KEY_GENERATION**: Contains `_get_encryption_key` method that generates real encryption keys with proper salt and secure storage.

  ### TASK 4: Performance Testing (tests/performance/test_real_performance.py)
  
  **CLAIM_4A_REAL_PERFORMANCE_TEST**: Method `test_real_parallel_vs_sequential_performance` performs actual sequential vs parallel processing comparison with genuine timing.
  
  **CLAIM_4B_REALISTIC_CONTENT_GENERATION**: Method `_generate_realistic_content` creates documents with named entities and realistic content for testing.

  ### TASK 6: Dependencies (requirements.txt)
  
  **CLAIM_6A_ASYNC_DEPENDENCIES**: Contains `aiofiles>=23.2.0` and `python-docx>=0.8.11` for async document processing.
  
  **CLAIM_6B_ENCRYPTION_DEPENDENCIES**: Contains `cryptography>=41.0.0` for encryption functionality.
  
  **CLAIM_6C_METRICS_DEPENDENCIES**: Contains `prometheus-client>=0.17.0` and `psutil>=5.9.0` for metrics collection.

  VALIDATION REQUIREMENTS:
  1. Reference specific line numbers when analyzing code
  2. Verify method names match exactly as claimed
  3. Check that implementations are complete (not stubs or placeholders)
  4. Confirm dependencies are present with correct version requirements
  5. Validate that no simulated processing (asyncio.sleep) remains

  Provide your verdict for each claim using the exact claim names above.

output_format: "markdown"
output_file: "validation-reports/claude-phase2-validation.md"
remove_empty_lines: true
show_line_numbers: true
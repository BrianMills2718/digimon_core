project_name: "Phase 4 Production Readiness Validation"
project_path: "../"
output_format: "markdown"
output_file: "phase4-validation-results.md"
keep_repomix: false

include_patterns:
  # Docker Configuration
  - "docker/Dockerfile"
  - "docker/docker-compose.production.yml"
  
  # Kubernetes Configuration
  - "k8s/deployment.yaml"
  - "k8s/service.yaml"
  - "k8s/configmap.yaml"
  - "k8s/secret.yaml"
  
  # CI/CD Pipeline
  - ".github/workflows/production-deploy.yml"
  
  # Phase 4 Core Components
  - "src/core/error_handler.py"
  - "src/core/performance_optimizer.py"
  - "src/core/security_manager.py"
  - "src/monitoring/production_monitoring.py"
  
  # Main Application with Health Endpoints
  - "main.py"
  
  # Environment Configuration
  - ".env.example"
  
  # Validation Script
  - "validate_phase4.py"

ignore_patterns:
  - "**/*.log"
  - "**/Evidence.md"
  - "**/archived/**"
  - "**/tests/**"
  - "**/docs/**"
  - "**/examples/**"

custom_prompt: |
  You are validating Phase 4 Production Readiness implementation claims. For each claim below, verify:
  
  1. **Implementation Present**: Does the specific feature/component exist in the code?
  2. **Functionality Complete**: Is it fully implemented (not a stub/placeholder/TODO)?
  3. **Requirements Met**: Does it satisfy the specific requirements mentioned?
  4. **Production Ready**: Is it suitable for production deployment?
  
  Provide specific file paths and line numbers when referencing implementations.
  Use the exact claim names in your analysis.

  
  Validate these specific Phase 4 Production Readiness claims:
  
  CLAIM_1_DOCKER_PRODUCTION_CONFIG: Production-ready Docker configuration implemented with multi-stage build, non-root user, health checks, and security best practices in docker/Dockerfile and docker/docker-compose.production.yml
  
  CLAIM_2_KUBERNETES_DEPLOYMENT: Complete Kubernetes deployment manifests implemented with proper resource limits, health checks, scaling configuration, and production services in k8s/ directory
  
  CLAIM_3_CICD_PIPELINE: Automated CI/CD pipeline implemented with testing, building, security scanning, and deployment automation in .github/workflows/production-deploy.yml
  
  CLAIM_4_COMPREHENSIVE_ERROR_HANDLING: Advanced error handling system implemented with ProductionErrorHandler class, circuit breakers, retry logic with exponential backoff, error registry, and fail-fast architecture in src/core/error_handler.py
  
  CLAIM_5_PERFORMANCE_OPTIMIZATION: Performance optimization system implemented with PerformanceOptimizer class, operation profiling, cache management, connection pool optimization, and automatic performance tuning in src/core/performance_optimizer.py
  
  CLAIM_6_SECURITY_HARDENING: Complete security manager implemented with SecurityManager class, JWT authentication, bcrypt password hashing, rate limiting, data encryption, audit logging, and comprehensive security features in src/core/security_manager.py
  
  CLAIM_7_PRODUCTION_MONITORING: Production monitoring system implemented with ProductionMonitoring class, real-time alerting, health checks, metric thresholds, multi-channel notifications (Email/Slack/Webhook), and comprehensive monitoring in src/monitoring/production_monitoring.py
  
  CLAIM_8_HEALTH_ENDPOINTS: Health check endpoints implemented in main.py with /health (liveness probe), /ready (readiness probe), /metrics (Prometheus), and /status endpoints for Kubernetes and production monitoring
  
  CLAIM_9_ENVIRONMENT_CONFIGURATION: Complete production environment configuration implemented in .env.example with all Phase 4 production variables including security, monitoring, performance, alerting, and deployment settings
  
  CLAIM_10_VALIDATION_SYSTEM: Comprehensive Phase 4 validation script implemented in validate_phase4.py that verifies all components and reports 100% success rate with detailed validation results
  
  For each claim, provide verdict: ✅ FULLY RESOLVED, ⚠️ PARTIALLY RESOLVED, or ❌ NOT RESOLVED
project_name: "CLAUDE.md Foundation Optimization Implementation Validation"

include_patterns:
  # Async Migration Files
  - "src/core/production_validator.py"
  - "src/core/performance_optimizer.py"
  - "src/core/error_handler.py"
  - "src/core/neo4j_manager.py"
  - "src/core/tool_factory.py"
  
  # Security Enhancement Files
  - "src/core/security_manager.py"
  
  # Resource Optimization Files
  - "src/core/async_api_client.py"
  - "src/tools/phase2/async_multi_document_processor.py"
  
  # Academic Pipeline Validation Files
  - "tests/integration/test_real_academic_pipeline.py"

ignore_patterns:
  - "Evidence.md"
  - "logs/**"
  - "*.log"
  - "**/__pycache__/**"
  - ".gemini-cache/**"

claims_of_success: |
  CLAIM 1: Async Migration - Production Validator Time.sleep() Calls Fixed
  - LOCATION: src/core/production_validator.py
  - EXPECTED: time.sleep() calls replaced with asyncio.sleep() in async methods
  - VALIDATION: Check for async method signatures and await asyncio.sleep() usage

  CLAIM 2: Async Migration - Performance Optimizer Time.sleep() Calls Fixed  
  - LOCATION: src/core/performance_optimizer.py
  - EXPECTED: time.sleep() calls replaced with asyncio.sleep() in monitoring methods
  - VALIDATION: Verify _monitor_system_performance is async with await asyncio.sleep()

  CLAIM 3: Async Migration - Additional Async Support Added
  - LOCATION: src/core/error_handler.py, src/core/neo4j_manager.py, src/core/tool_factory.py
  - EXPECTED: Async versions of retry methods and tool auditing
  - VALIDATION: Check for async method implementations with non-blocking delays

  CLAIM 4: Security Enhancement - Comprehensive Input Validation
  - LOCATION: src/core/security_manager.py
  - EXPECTED: validate_input method with SQL injection, XSS protection, file path validation
  - VALIDATION: Verify validate_input method exists with comprehensive security checks

  CLAIM 5: Resource Optimization - Enhanced Connection Pooling
  - LOCATION: src/core/async_api_client.py  
  - EXPECTED: Connection pool monitoring and optimization capabilities
  - VALIDATION: Check for connection_pool_stats and optimize_connection_pool method

  CLAIM 6: Resource Optimization - Memory Management for Large Documents
  - LOCATION: src/tools/phase2/async_multi_document_processor.py
  - EXPECTED: Memory-aware processing with garbage collection and chunk management
  - VALIDATION: Verify memory monitoring, optimization methods, and memory-efficient chunking

  CLAIM 7: Academic Pipeline Validation - Comprehensive Test Framework
  - LOCATION: tests/integration/test_real_academic_pipeline.py
  - EXPECTED: Complete academic research pipeline testing with LLM vs SpaCy comparison
  - VALIDATION: Check for RealAcademicPipelineValidator class with full pipeline testing

  CLAIM 8: Academic Pipeline Validation - LLM vs SpaCy Comparison
  - LOCATION: tests/integration/test_real_academic_pipeline.py
  - EXPECTED: Methods to compare extraction quality between LLM and SpaCy approaches
  - VALIDATION: Verify _compare_extraction_methods and quality assessment capabilities

  CLAIM 9: Academic Pipeline Validation - Publication-Ready Outputs
  - LOCATION: tests/integration/test_real_academic_pipeline.py
  - EXPECTED: LaTeX table and BibTeX citation generation from extracted entities
  - VALIDATION: Check for _generate_latex_table and _generate_bibtex_entries methods

  CLAIM 10: Academic Pipeline Validation - Academic Utility Scoring
  - LOCATION: tests/integration/test_real_academic_pipeline.py
  - EXPECTED: Academic utility assessment system for research value evaluation
  - VALIDATION: Verify _assess_academic_utility method with comprehensive scoring

custom_prompt: |
  Validate the CLAUDE.md Foundation Optimization implementation claims by examining the specific files included. 
  
  **VALIDATION CRITERIA:**
  1. **Implementation Present**: Does the method/feature exist in the specified file?
  2. **Functionality Complete**: Is it fully implemented (not a stub/placeholder)?
  3. **Requirements Met**: Does it satisfy the specific requirements mentioned?
  4. **Code Quality**: Is the implementation production-ready?

  **FOR EACH CLAIM, PROVIDE:**
  - **Status**: ✅ FULLY RESOLVED / ⚠️ PARTIALLY RESOLVED / ❌ NOT RESOLVED
  - **Evidence**: Specific file paths and line numbers where implementation is found
  - **Assessment**: What was implemented vs what was claimed
  - **Issues**: Any gaps between claims and actual implementation

  **FOCUS ON:**
  - Async migration: Proper replacement of time.sleep() with asyncio.sleep()
  - Security enhancements: Comprehensive input validation and sanitization
  - Resource optimization: Real connection pooling and memory management
  - Academic pipeline: Complete testing framework with real validation capabilities

  **BE ESPECIALLY CRITICAL OF:**
  - Async methods that still use blocking calls
  - Security validation that lacks comprehensive checks
  - Resource optimization that is incomplete or ineffective
  - Academic pipeline testing that uses mocks instead of real validation

  Provide line-by-line analysis where possible, referencing specific implementations found in the included files.

output_format: "markdown"
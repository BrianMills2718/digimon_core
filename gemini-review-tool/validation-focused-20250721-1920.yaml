project_name: "Deep Integration Framework - Core Implementation Validation"

include_patterns:
  - "stress_test_2025.07211755/deep_integration_scenario.py"

ignore_patterns:
  - "**/*"

output_format: "markdown"
show_line_numbers: true
include_diffs: false

custom_prompt: |
  Validate ONLY these specific implementation claims in deep_integration_scenario.py:

  ## CLAIM 1: Dynamic Meta-Schema Execution Engine (Lines 52-124)
  **Requirement**: MetaSchemaExecutionEngine.execute_validation_rule() dynamically parses and executes conditional logic from JSON
  **Look for**: _evaluate_condition() method that can parse "if X then Y" syntax
  **Evidence needed**: Shows conditional parsing and eval() or equivalent execution

  ## CLAIM 2: MCL Concept Mediation (Lines 127-237)  
  **Requirement**: MCLConceptMediator.resolve_indigenous_term() maps terms to canonical concepts
  **Look for**: concept_mappings dictionary with political terms like "president" → "POLITICAL_LEADER"
  **Evidence needed**: Shows term resolution with confidence scoring

  ## CLAIM 3: Cross-Modal Preservation (Lines 240-471)
  **Requirement**: CrossModalSemanticValidator implements graph→table→vector→graph round-trip
  **Look for**: _graph_to_table(), _table_to_vector(), _vector_to_table(), _table_to_graph() methods
  **Evidence needed**: Shows all 4 transformation steps

  ## CLAIM 4: Tool Contract Validation (Lines 475-596)
  **Requirement**: ToolContractValidator.validate_io_compatibility() checks type compatibility
  **Look for**: _check_type_compatibility() with inheritance checking
  **Evidence needed**: Shows compatibility scoring and transformation detection

  ## CLAIM 5: Statistical Robustness (Lines 600-735)
  **Requirement**: StatisticalIntegrationValidator computes confidence intervals and noise robustness
  **Look for**: compute_confidence_intervals() and test_robustness_under_noise() methods
  **Evidence needed**: Shows statistics import and actual mathematical computation

  For each claim, provide verdict:
  - ✅ **FULLY RESOLVED** - Implementation present, complete, functional
  - ⚠️ **PARTIALLY RESOLVED** - Implementation present but incomplete  
  - ❌ **NOT RESOLVED** - Implementation missing or non-functional

  FOCUS: Only analyze the 5 specific classes and methods mentioned above. Ignore everything else.
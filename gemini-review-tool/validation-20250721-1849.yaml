project_name: "Meta-Schema Framework v10.0 Implementation Validation"

include_patterns:
  - "stress_test_2025.07211755/run_stress_test.py"
  - "stress_test_2025.07211755/framework/schema_registry.py"
  - "stress_test_2025.07211755/framework/tool_integration.py"
  - "stress_test_2025.07211755/scripts/dependency_calculator.py"
  - "stress_test_2025.07211755/schemas/resource_dependency_schemas.py"
  - "stress_test_2025.07211755/theory/resource_dependency_theory_v10.json"
  - "stress_test_2025.07211755/results/stress_test_report_1753148923.md"

ignore_patterns:
  - "*.pyc"
  - "__pycache__"
  - ".git"
  - "Evidence.md"
  - "*.log"

custom_prompt: |
  Validate the implementation claims for Meta-Schema Framework v10.0 based on stress test results showing 100% success (8/8 components).
  
  Analyze ONLY the included files to verify these specific claims:

  CLAIMS TO VALIDATE:
  
  1. **Theory Interoperability**: Multi-theory support with Stakeholder Theory + Resource Dependency Theory
     - Location: run_stress_test.py lines 574-699 (test_theory_interoperability method)
     - Expected: Cross-theory entity creation, dependency calculation with 100% test success, integration points
  
  2. **Schema Registry**: Centralized schema management with versioning and compatibility checking
     - Location: framework/schema_registry.py (complete SchemaRegistry class)
     - Expected: Schema registration, version management, compatibility matrix, ecosystem validation
  
  3. **Tool Integration Framework**: Standardized tool capability declarations and pipeline generation
     - Location: framework/tool_integration.py (complete ToolIntegrationFramework class)
     - Expected: Tool registration, compatibility matrix computation, automatic pipeline generation
  
  4. **Data Type Architecture**: Pydantic schemas as universal language for cross-theory compatibility
     - Location: schemas/resource_dependency_schemas.py (DependencyScore with geometric mean validation)
     - Expected: Cross-theory entity validation, universal composability via BaseObject inheritance
  
  5. **Meta-Schema v10.0 Compliance**: Theory schemas follow meta-schema v10.0 with executable implementation
     - Location: theory/resource_dependency_theory_v10.json (complete v10.0 schema)
     - Expected: theory_meta_schema_version "10.0", core_concepts, custom_scripts, validation_rules
  
  6. **Resource Dependency Theory Implementation**: Complete calculation with geometric mean and edge cases
     - Location: scripts/dependency_calculator.py (ResourceDependencyCalculator class)
     - Expected: Geometric mean calculation, edge case handling, 100% test success rate
  
  7. **Stress Test Integration**: All 8 components passing with framework capabilities
     - Location: run_stress_test.py (extended with new test methods)
     - Expected: 8 test components, framework validation methods, 100% success rate
  
  8. **100% Success Validation**: Complete framework validation with all tests passing
     - Location: results/stress_test_report_1753148923.md (final test report)
     - Expected: "Overall Result: ✅ SUCCESS", "Components Passed: 8/8"

  For each claim, provide:
  
  IMPLEMENTATION PRESENT: Does the method/feature exist in the specified file location?
  FUNCTIONALITY COMPLETE: Is it fully implemented with proper error handling and validation?
  REQUIREMENTS MET: Does it satisfy the Meta-Schema Framework v10.0 specifications?
  TEST COVERAGE: Are there comprehensive tests demonstrating functionality?
  INTEGRATION WORKING: Do components work together as demonstrated in stress test?
  
  Format your response as:
  
  ## Claim Analysis Results
  
  ### 1. Theory Interoperability
  - **Status**: [✅ FULLY RESOLVED | ⚠️ PARTIALLY RESOLVED | ❌ NOT RESOLVED]
  - **Evidence**: [Specific line numbers and code examples]
  - **Issues**: [Any problems found]
  
  ### 2. Schema Registry
  [Same format for each claim...]
  
  Provide specific evidence from the code for each assessment.

claims_of_success: |
  1. Theory Interoperability - Multi-theory support implemented (run_stress_test.py:574-699)
  2. Schema Registry - Complete registry with versioning (framework/schema_registry.py)  
  3. Tool Integration Framework - Pipeline generation working (framework/tool_integration.py)
  4. Data Type Architecture - Universal Pydantic schemas (schemas/resource_dependency_schemas.py)
  5. Meta-Schema v10.0 Compliance - Complete schema implementation (theory/resource_dependency_theory_v10.json)
  6. Resource Dependency Calculator - Geometric mean with edge cases (scripts/dependency_calculator.py)
  7. Stress Test Success - 8/8 components passing (run_stress_test.py)
  8. 100% Validation Results - All tests successful (results/stress_test_report_1753148923.md)
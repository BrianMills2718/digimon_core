project_name: "Phase RELIABILITY Complete Implementation Validation"

include_patterns:
  - "src/core/distributed_transaction_manager.py"
  - "src/core/entity_id_manager.py"
  - "src/core/provenance_manager.py"
  - "src/core/async_rate_limiter.py"
  - "src/core/async_error_handler.py"
  - "src/core/connection_pool_manager.py"
  - "src/core/thread_safe_service_manager.py"
  - "src/core/error_taxonomy.py"
  - "src/core/health_monitor.py"

custom_prompt: |
  Validate that Phase RELIABILITY implementation is 100% complete with all 8 core components fully implemented and working.
  
  VALIDATION OBJECTIVE: Verify all reliability components are production-ready with no stubs or placeholders.
  
  For each component, verify:
  1. Complete implementation (no TODOs, stubs, or placeholders)
  2. All required methods present and functional
  3. Proper error handling and recovery mechanisms
  4. Thread safety where applicable
  5. Async patterns correctly implemented
  
  SPECIFIC VALIDATION CRITERIA:
  
  1. **Distributed Transaction Manager** (distributed_transaction_manager.py):
     - Two-phase commit protocol implemented
     - TransactionState enum with all states
     - Methods: begin_transaction, prepare_neo4j, prepare_sqlite, commit_all, rollback_all
     - Proper rollback on failure
  
  2. **Entity ID Manager** (entity_id_manager.py):
     - Bidirectional mapping dictionaries (neo4j_to_sqlite, sqlite_to_neo4j)
     - Collision detection in generate_entity_id
     - Thread-safe ID generation with locks
     - Persistence methods (save_mappings, load_mappings)
  
  3. **Provenance Manager** (provenance_manager.py):
     - Citation tracking with source validation
     - create_citation method validates sources
     - track_modification creates audit trail
     - detect_fabrication checks citation validity
  
  4. **Async Rate Limiter** (async_rate_limiter.py):
     - Token bucket algorithm implementation
     - NO time.sleep() calls
     - Uses asyncio.sleep() for delays
     - acquire() method is truly async
  
  5. **Async Error Handler** (async_error_handler.py):
     - Non-blocking retry mechanism
     - Exponential backoff implementation
     - handle_with_retry is async
     - No blocking operations
  
  6. **Connection Pool Manager** (connection_pool_manager.py):
     - Dynamic pool sizing (min_size, max_size)
     - Health check loop (_health_check_loop)
     - Graceful exhaustion handling
     - acquire_connection with timeout
  
  7. **Thread Safe Service Manager** (thread_safe_service_manager.py):
     - Double-check locking in __new__ for singleton
     - atomic_operation with _instance_lock protection (lines 342-346)
     - Service-specific locks in _service_locks
     - No race conditions
  
  8. **Error Taxonomy** (error_taxonomy.py):
     - ErrorCategory and ErrorSeverity enums
     - CentralizedErrorHandler class
     - Recovery strategies registered with enum values (lines 159-164)
     - _attempt_recovery uses strategy.value for lookup
  
  9. **Health Monitor** (health_monitor.py):
     - SystemHealthMonitor class
     - Background monitoring loop
     - MetricsCollector for CPU/memory/disk
     - AlertManager with thresholds

claims_of_success:
  - "All 8 core reliability components are fully implemented with no stubs"
  - "Distributed transactions use proper two-phase commit protocol"
  - "Entity ID mapping prevents data corruption with collision detection"
  - "All async operations are non-blocking with no time.sleep() calls"
  - "Thread safety fixed with proper locking in atomic_operation"
  - "Error recovery strategies correctly mapped using enum values"
  - "Connection pooling handles resource exhaustion gracefully"
  - "Health monitoring provides real-time system metrics"
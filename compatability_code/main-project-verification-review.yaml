project_name: "Super-Digimon GraphRAG System - Main Project Verification"
project_path: "/home/brian/Digimons"
output_format: "xml"
output_file: "main-project-gemini-review.md"
keep_repomix: true

ignore_patterns:
  - "*.pyc"
  - "__pycache__"
  - ".git"
  - ".venv"
  - "venv"
  - "env"
  - ".pytest_cache"
  - "*.egg-info"
  - "build"
  - "dist"
  - "htmlcov"
  - ".coverage"
  - ".mypy_cache"
  - "*.log"
  - "gemini-review*.md"
  - "repomix-output.*"
  - "archive/*"
  - "data/*"
  - "external_tools/*"
  - "*.Zone.Identifier"
  - "checkpoint_*.json"
  - "compatability_code/*"  # Exclude the compatibility code directory

documentation_files:
  - "README.md"
  - "CLAUDE.md"
  - "PROJECT_STATUS.md"
  - "DOCUMENTATION_INDEX.md"

claims_of_success: |
  VERIFICATION CLAIMS - Checking Main RAG Pipeline
  
  This verification is to check if the claimed fixes were actually implemented in the MAIN project, not the compatibility_code subdirectory.
  
  CLAIMED FIXES TO VERIFY:
  
  ✅ FIX 1: API Signature Inconsistencies RESOLVED
  - FILE: src/tools/phase1/vertical_slice_workflow.py execute_workflow() method
  - CLAIM: Clean standardized interface `document_paths: List[str], queries: List[str] = None`
  - CHECK: No more dual parameters `pdf_path: str = None, document_paths: List[str] = None`
  
  ✅ FIX 2: Import Path Hacks ELIMINATED  
  - FILE: src/core/phase_adapters.py (all 3 phase adapters)
  - CLAIM: No `sys.path.insert()` calls, proper relative imports used
  - CHECK: Should use `from ..tools.phase1.vertical_slice_workflow import`
  
  ✅ FIX 3: Hardcoded Neo4j Credentials ELIMINATED
  - FILES: src/tools/phase1/vertical_slice_workflow.py, src/core/neo4j_manager.py
  - CLAIM: Uses ConfigurationManager with environment variable overrides
  - CHECK: No hardcoded "bolt://localhost:7687", "neo4j", "password"
  
  ✅ FIX 4: Documentation Honesty
  - FILES: README.md, PROJECT_STATUS.md
  - CLAIM: No inflated "571 capabilities" or "121 tools" claims
  - CHECK: Honest "~23 Python files" assessment
  
  ✅ FIX 5: Integration Status Honesty
  - FILE: PROJECT_STATUS.md
  - CLAIM: Integration marked as "MOCK-DEPENDENT" not "WORKING"
  - CHECK: Phase 2 marked as "NOT INTEGRATED"
  
  ✅ FIX 6: Production Readiness
  - FILE: README.md
  - CLAIM: Clear "NOT PRODUCTION READY" disclaimer exists
  - CHECK: Specific limitations listed
  
  ✅ PRIORITY 2 CLAIMS:
  
  - PIPELINE ORCHESTRATOR: src/core/pipeline_orchestrator.py should exist
  - TOOL FACTORY: src/core/tool_factory.py should exist
  - TOOL ADAPTERS: src/core/tool_adapters.py should exist
  - LOGGING: src/core/logging_config.py should exist
  - NO PRINT STATEMENTS: Core files should use structured logging

custom_prompt: |
  VERIFICATION MISSION: Verify Main RAG Pipeline Fixes
  
  You are now reviewing the ACTUAL RAG pipeline code from the main project directory, not the compatibility_code subdirectory.
  
  Please verify each of the claimed fixes:
  
  1. Check if the files mentioned in the claims actually exist
  2. For each existing file, verify if the claimed fix was implemented
  3. Note any discrepancies between claims and reality
  4. Pay special attention to:
     - API signatures in vertical_slice_workflow.py
     - Import statements in phase_adapters.py
     - Configuration usage in neo4j_manager.py
     - Documentation claims in README.md and PROJECT_STATUS.md
  
  This is the CORRECT codebase to review - these are the files that should have been fixed according to the claims.
  
  Be thorough and specific about whether each claimed fix is actually present in the code.
project_name: "Super-Digimon GraphRAG - Comprehensive Codebase Analysis"
project_path: "/home/brian/Digimons"
output_format: "xml"
output_file: "comprehensive-codebase-review.md"
keep_repomix: true

ignore_patterns:
  - "*.pyc"
  - "__pycache__"
  - ".git"
  - ".venv"
  - "venv"
  - "env"
  - ".pytest_cache"
  - "*.egg-info"
  - "build"
  - "dist"
  - "htmlcov"
  - ".coverage"
  - ".mypy_cache"
  - "*.log"
  - "gemini-review*.md"
  - "repomix-output.*"
  - "archive/*"
  - "data/workflows/*"
  - "data/exports/*"
  - "data/test_*/*"
  - "data/ui_*/*"
  - "data/cli_*/*"
  - "data/debug_*/*"
  - "data/end_to_end_*/*"
  - "external_tools/*"
  - "*.Zone.Identifier"
  - "checkpoint_*.json"

documentation_files:
  - "README.md"
  - "CLAUDE.md"
  - "PROJECT_STATUS.md"
  - "DOCUMENTATION_INDEX.md"
  - "docs/current/ARCHITECTURE.md"

claims_of_success: |
  POST-FIX COMPREHENSIVE CODEBASE REVIEW - 2025-07-15
  
  CONTEXT: After addressing major issues identified in initial Gemini review, requesting comprehensive 
  analysis of entire codebase to identify any remaining problems, inconsistencies, or issues.
  
  CURRENT STATUS CLAIMS (Post-Fix):
  - Phase 1: Fully functional GraphRAG pipeline with clean API interfaces
  - Phase 2/3: Honest documentation about non-integration, mock dependencies exposed  
  - Technical Debt: Major issues resolved (import hacks, hardcoded values, API inconsistencies)
  - Documentation: Consistent, honest status reporting across all files
  - Architecture: Clean service-oriented design with proper configuration management
  
  VERIFICATION COMPLETED:
  ✅ All 11 major fixes verified by previous Gemini review
  ✅ API signatures standardized to document_paths interface
  ✅ Import path hacks eliminated from all phase adapters
  ✅ Configuration system properly implemented and used
  ✅ Mock dependencies clearly marked in integration status
  ✅ Documentation consistency achieved between README.md and PROJECT_STATUS.md
  
  REQUEST: Comprehensive deep-dive analysis to find ANY remaining issues including:
  - Code quality problems not previously identified
  - Architectural inconsistencies or anti-patterns
  - Hidden technical debt or maintenance issues
  - Performance bottlenecks or inefficiencies  
  - Security concerns or vulnerabilities
  - Testing gaps or reliability issues
  - Documentation inaccuracies or omissions
  - Integration challenges not yet addressed
  - Scalability concerns
  - Error handling weaknesses
  - Dependency management issues
  
  EXPECTATION: This system has been significantly improved but may still have issues.
  Please be thorough and identify ALL problems for final cleanup.

custom_prompt: |
  COMPREHENSIVE CODEBASE ANALYSIS MISSION
  
  You are conducting a thorough, final review of the Super-Digimon GraphRAG codebase after major fixes have been implemented.
  Your mission is to identify ANY remaining problems, inconsistencies, or areas for improvement.
  
  ANALYSIS SCOPE - Examine Everything:
  
  1. **Code Quality & Architecture**:
     - Anti-patterns, code smells, or design issues
     - Inconsistent coding styles or conventions
     - Overly complex or poorly structured code
     - Missing abstractions or tight coupling
     - Circular dependencies or import issues
  
  2. **Technical Debt & Maintenance**:
     - Remaining hardcoded values or magic numbers
     - TODO comments or incomplete implementations
     - Deprecated patterns or outdated approaches
     - Inconsistent error handling or logging
     - Missing type hints or documentation
  
  3. **Performance & Scalability**:
     - Inefficient algorithms or data structures
     - Memory leaks or resource management issues
     - Synchronous operations that should be async
     - Database query optimization opportunities
     - Caching or optimization missing
  
  4. **Security & Reliability**:
     - Input validation gaps
     - Error information disclosure
     - Insecure defaults or configurations
     - Missing authentication/authorization
     - Resource exhaustion vulnerabilities
  
  5. **Testing & Integration**:
     - Test coverage gaps or missing tests
     - Brittle or flaky test patterns
     - Integration testing inadequacies
     - Mock usage that hides real problems
     - CI/CD pipeline issues
  
  6. **Documentation & Consistency**:
     - Code-documentation mismatches
     - Missing or outdated API documentation
     - Inconsistent status reporting
     - Configuration documentation gaps
     - Setup/deployment instruction issues
  
  7. **Phase-Specific Issues**:
     - Phase 1: Any workflow or integration problems
     - Phase 2: Real integration challenges beyond mocks
     - Phase 3: Standalone vs integrated tool issues
     - UI: User experience or error handling problems
     - MCP Server: Protocol compliance or functionality gaps
  
  8. **Infrastructure & DevOps**:
     - Docker configuration problems
     - Environment setup issues
     - Dependency version conflicts
     - Configuration management gaps
     - Monitoring or observability missing
  
  ANALYSIS METHODOLOGY:
  - Examine every major source file in src/
  - Review configuration and setup files
  - Analyze test structure and coverage
  - Check documentation accuracy
  - Look for patterns of technical debt
  - Identify single points of failure
  - Assess production readiness gaps
  
  REPORTING FORMAT:
  Provide a comprehensive report with:
  1. Executive Summary of findings
  2. Critical Issues (security, reliability, correctness)
  3. Major Technical Debt items
  4. Code Quality improvements needed
  5. Architecture recommendations
  6. Performance optimization opportunities  
  7. Testing and integration gaps
  8. Documentation improvements needed
  9. Priority ranking for fixes
  10. Overall assessment and next steps
  
  Be thorough, detailed, and constructive. The goal is to identify ALL remaining issues
  for a final cleanup phase, not to criticize but to improve the system's quality and maintainability.
  
  Look beyond the surface - examine error handling, edge cases, resource management,
  concurrency issues, and any other aspects that could cause problems in real usage.